# 답변형 게시판
1. 주요기능
	1) 전체글 리스트
		block단위 페이징
			- 한 번에 보일 데이터 건수 설정(3/5/10/20...)			
				[1][2][3][4][5] >>
				<< [5][6][7][8][9]
		검색
		계층형 답글 달기
	2) 글 등록
		첨부파일
	3) 상세화면
		수정
		삭제
		파일 다운로드
		답글
2. 개발 순서
	1) DB 설계 및 테이블 구성
		board: 번호, 상위 번호, 제목, 작성자, 등록일, 수정일, 조회수, 내용
			   no, refno, subject, writer, regdte, uptdte, readcnt, content
		boardfile: 번호, 파일명, 경로명, 내용, 생성일
				   no, fname, pathname, content, credte
		board_seq (sequence 만들기)		
	2) VO 작성
		리스트/입력 처리 VO(board.z01_vo.Board)
		조회처리 및 페이지 처리 관련 VO(board.z01_vo.BoardSch)
		첨부파일 VO(board.z01_vo.Boardfile)
	3) 기본 조회 리스트 작성
		SQL
			SELECT * FROM BOARD
			WHERE SUBJECT LIKE '%%'
			AND WRITER LIKE '%%'
		DAO
		mapper
		service
		controller
		JSP(화면 출력)	
	4) 등록
		SQL
			INSERT INTO board VALUES (BOARD_seq.nextval, 0, '첫 번째 글', '내용', '홍길동', 0, sysdate, sysdate)
		DAO
		mapper
		service
			첨부파일 로직 처리
		controller
		JSP(초기화면 구성)		
	5) 상세화면
		- 상세화면 보기
		- 수정
		- 삭제
		- 답글
	6) 계층형 리스트 처리하기
		- 계층형 SQL 작성
		- 조회 VO 할당(BoardSch 추가)
			전체글수[DB]
			페이지당 보일 데이터 건수[화면-요청]
			페이지수[service단 로직]
			현재페이지[화면-요청]
			시작번호[service단 로직]
			마지막번호[service단 로직]
		- SERVICE단에서 BUSINESS로직 처리
		- 계층적 리스트 및 페이징
			페이지당 데이터건수 select[3/5/10/20]
			클릭한 현재 페이지 번호 [1][2][3][4][5]
			페이지 블럭 처리 <<		>>
		
# DB 설계 및 VO 만들기		
	1) DB 설계 및 테이블 구성
		board: 번호, 상위 번호, 제목, 작성자, 등록일, 수정일, 조회수, 내용
			   no, refno, subject, writer, regdte, uptdte, readcnt, content
		boardfile: 번호, 파일명, 경로명, 내용, 생성일
				   no, fname, pathname, content, credte
		board_seq (sequence 만들기)		
	2) VO 작성
		리스트/입력 처리 VO(board.z01_vo.Board)
		조회처리 및 페이지 처리 관련 VO(board.z01_vo.BoardSch)
		첨부파일 VO(board.z01_vo.Boardfile)

# 기본 조회 리스트 작성
	1) SQL
		SELECT * FROM BOARD
		WHERE SUBJECT LIKE '%%'
		AND WRITER LIKE '%%'
		ORDER BY NO DESC;
	2) DAO
		public ArrayList<Board> boardList(Board sch);
	3) MAPPER
			
	4) SERVICE
		board.a02_service.A01_BoardService
	5) CONTROLLER
		modelattribute명 sch
		model명 boardList
	6) JSP(VIEW)
	
	
# 기본 정보 등록
	1) list화면에서 등록 버튼 클릭
		/board.do?method=insForm 으로 등록 화면 이동
	2) Controller 등록화면 선언
	3) 등록 화면: 
		a02_boardInsert.jsp
		form 화면 구성(action=board.do?method=insert)
		> 상위글번호(0, hidden), 글제목, 작성자, 내용, 첨부파일
	4) 등록 SQL
		INSERT INTO board VALUES (BOARD_seq.nextval, 0, '첫 번째 글', '내용', '홍길동', 0, sysdate, sysdate)
	5) DAO
		public void insertBoard(Board insert);
	6) mapper.xml 작성
	7) service
	8) controller
		등록 service 호출
	9) 화면 등록 완료 처리 메시지 출력

# 파일 업로드
0. container(dispatcher-servlet.xml)에 파일 업로드 view bean 추가
	org.springframework.web.multipart.commons.CommonsMultipartResolver
1. 다중파일 업로드를 위한 화면 UI 구성(view)
	<input type="file" name="report"/>
2. form 객체의 속성 추가
	<form enctype="multipart/form-data">
3. container에 파일 업로드 view bean추가
	org.springframework.web.multipart.commons.CommonsMultipartResolver
4. VO에서 report라는 프로퍼티로 네트웍상 client에서 server로 전송 가능하게 해주는 MultipartFile 객체 속성 선언
	private MultipartFile[] report;
5. Controller에서 파일이 전송되었는지 확인
6. service단에서 받은 MultipartFile을 File객체로 변환해서
	1) 특정 위치에 저장
		eclipse tomcat 웹 서비스를 사용하기 때문
		- 임시 폴더: 임시 저장(tmpUpload) - info에 위치 설정(절대위치 지정)
		- 파일을 다운로드할 폴더(upload): 임시 폴더에 있는 파일을 추후 다운로드할 폴더에 복사 
			- info에 위치 설정(절대위치 지정)(WebContent\z01_upload)
		- 다운로드 업로드 폴더 위치 지정(WebContent\z01_upload)
		- 임시 폴더에 있는 모든 파일 삭제(예외 방지)
		- MultipartFile 객체(메모리로 파일정보 저장)
			==> File변환(메모리+하드웨어적으로 특정 위치에 파일 저장)
			transferTo()메서드 사용
		- 임시파일 ==> 업로드할 위치로 복사
			파일 카피 정책으로는 기존파일이 있으면 덮어쓰기
			ex) 현업 프로세스
			1. WAS 서버 별도 구축
			2. file 서버 별도 구축
			임시폴더가 필요 없음. 바로 파일 서버로 저장.
			동일 명의 파일에 대한 처리.
				ex) 게시판 no 1번에 첨부파일 a.txt 저장
					no 2번에 다른 내용의 첨부파일 a.txt를 저장
					파일 첨부 시 저장되는 파일명 컬럼지정(중복되지 않게)
					hash코드+sequence abse10001(파일 서버에 저장할 파일명 - 중복 불가)
					실제 파일명은 따로 컬럼을 지정해서 저장
					번호	저장명		파일명
					1	abse10001	a.txt
					2.	abse10002	a.txt
					다운로드 시 DB에 저장된 파일명으로 전환하여 다운로드 할 수 있게 처리				
	2) DB에 해당 파일 정보를 저장
		(상세화면에서 다운로드 처리를 위해 파일 정보 저장)
		- DB 구조 만들기
			boardfile: 번호, 파일명, 경로명, 내용, 생성일
				   	   no, fname, pathname, content, credte			
		- SQL
			INSERT INTO BOARDFILE(BOARD_SEQ.CURRVAL, #{fname}, #{pathname}, #{content}, sysdate)
			board_seq.currval: 등록하는 main board테이블의 no(board_seq.nextval)와 동일하게 해줌
		- VO만들기: BoardFile
		- DAO
		- 공통 VO 마이바티즈 공통파일 등록, mapper.xml에 SQL 등록
		- Service단에서 호출


# 상세화면		
1. 리스트 화면에서 특정한 row 클릭, no와 함께 Controller 상세화면 처리
2. SQL 작성
	SELECT * FROM BOARD WHERE NO = #{NO}
3. DAO 작성
4. XXXmapper.xml
5. service 호출
6. controller
	- model
	- 상세화면 호출
7. 상세화면에 출력 리스트

# 첨부파일 리스트 및 다운로드
1. SQL 작성
	SELECT * FROM BOARDFILE WHERE NO = #{NO}
2. VO확인
3. DAO
	public ArrayList<BoardFile> getBoardFile(int no);
4. mapper
5. Board VO객체에 첨부파일을 처리할 수 있는 기능 추가 등록
	private ArrayList<BoardFile> fileInfo; + setter/getter
6. Service에서 Board VO에 할당
7. JSP에서 처리

# 리스트된 내용을 클릭으로 상세화면 처리 시, 조회수 count up 처리
1. SQL
	UPDATE BOARD
		SET READCNT = READCNT+1
	WHERE NO = #{NO}
2. DAO
	public void update(int no);
3. mapper
4. service단에서 호출
	dao.updateBoard(no);
	
# 파일 다운로드
1. 리스트
	board의 FileInfo로 리스트 처리
2. 파일 다운로드 view 등록
	# 파일 다운로드 viewer 작성
	1. API에서 지원되는 부분에서 model데이터로 특정한 파일을 지정해야 하기때문에 사용자 정의로 만들어야 한다.
	2. 사용자 정의 viewer 작성 순서
		- 1. 상속 AbstractView 선언
			1) overriding 메서드 재정의
				- renderMergedOutputModel
					매개변수
					Map<String, Object> model,: 다운로드할 파일명을 할당
					HttpServletRequest request,
					HttpServletResponse response
		- 2. 다운로드
			1) upload 된 파일 가져오기(서버가 가지고 있는 파일)
				- 현재 viewer를 호출 시 사용되는 model 객체 가져오기
				- File 객체 생성
			2) 모델과 함께 있는 File객체 가져오기(서버가 가지고 있는 파일)
			3) 반응 객체(response)로 전달(클라이언트의 파일)
				- 전체 파일명
				- 파일명
				- 파일의 길이
				- setContentType 설정: application/download;charset-utf-8
				- setContentLength로 파일의 길이 설정
				- 한글명된 파일은 Encoding
				- 파일을 response에 탑재하기 위한 header부분 설정
					Content-Disposition으로 attachment로 파일 설정
					Content-Transfer-Encoding 설정. binary 설정
				- 파일을 network로 전송하기 위해 Stream 객체로 변환
					InputStream(읽어오는 객체) ==> OutputStream(보내는 객체)
					FileInputStream(파일 객체)
					FileCopyUtils.copy(InputStream, OutputStream)
					OutputStream의 flush를 통해 자원 해제		
3. 파일을 모델로 파일 다운로드 처리 controller 생성
	- 요청값으로 파일명을 전송
	- model값 파일을 설정. downloadFile로 설정해야 지정된 파일명을 viewer에서 인식
	- return으로 컨테이너에서 선언한 bean id(downloadviewer)를 호출
4. 상세화면 리스트에서 함수로 파일 다운 호출
	다운로드 Controller 호출
5. 해당 파일 클릭 시 다운로드 처리

# 파일 다운로드 프로세스
1. 다운로드 viewer 만들기
	model명을 지정하고, 모델명에 파일명을 설정할 수 있도록 처리
2. 컨테이너에 viewer 등록 처리
3. 다운로드 할 controller URL 기능 메서드 추가
	1) 요청값으로 파일명 전송
4. 화면(JSP)에서 list된 파일 중, 이벤트 클릭으로 다운로드할 controller URL과 함께 파일명 호출
5. 다운로드 확인

# 상세화면에서 session값에 의해 수정 삭제 권한 처리
1. session값 로딩(JS변수로 설정)
	var sessId = "${mem.id}";
2. 수정/삭제 버튼 클릭 시
	1) 작성자와 현재 session값이 동일한 지 확인해서 수정/삭제 프로세스가 진행될 수 있도록 처리
	
# 수정처리
1. SQL 작성
	UPDATE BOARD
		SET SUBJECT = #{SUBJECT},
			CONTENT = #{CONTENT},
			UPTDTE = SYSDATE
	WHERE NO = #{NO};
2. DAO
	public void updateBoard(Board upt);
3. mapper.xml
4. service
5. controller
	요청 객체 Board
	수정 요청 board.do?method=update
	수정 프로세스 service.update(upt);
6. 상세화면(view단)
	수정버튼 클릭 시
	$("form").attr("action", 요청url 처리);
	$("[name=proc]").val("upt");
	$("form").submit();
	<input type="hidden" name="proc"/>
	최종 script 처리
	var proc = "${param.proc}";
	if(proc=="upt"){
		수정 완료 메시지 출력
	}

# 첨부파일 수정 프로세스
0. SQL
	update boardfile
		set fname = #{fname}
	where no = #{no} and fname = #{orgFname}
	기존 파일을 신규 업로드한 파일로 변경
1. 상세화면
	1) form요소객체 정리
		<input type="text" name="fnames" />: 수정할 파일명(기존 파일명)
		<input type="file" name="report" />: 바꿀 파일 정보(업로드 파일)
	2) form 속성 enctype설정
2. VO객체 선언
	private String[] fnames;
3. DB 파일 정보 수정
	1) DAO
		public void updateFile(HashMap<String, String> hs);
	2) mapper
4. service단 파일
	객체의 배열 index와 fnames의 index를 mapping 하여
	1) 파일 업로드
		- 임시폴더: 전체 파일 삭제
		- 업로드 폴더: 업로드 중에 변경할 파일 삭제
		- 파일 업로드
	2) DB 처리

# 삭제
1. SQL 작성
	delete from board where no = #{no}
2. DAO 선언
	public void deleteBoard(int no);
3. service 호출
4. controller
	선언: /board.do?method=delete
	요청값으로 no를 받아서 처리
5. view
	삭제버튼 클릭 시
		삭제 controller 호출
		proc값 del 설정

# 답글 달기
1. 게시판에서 해당 게시물에 대한 답글을 처리하는 것을 말한다.
	실제적으로 답글이라는 글을 등록 하는 것을 프로그래밍한다.
2. DB 구조
	board의 no와 refno는 상호 계칭구조로 데이터를 쌓이게 처리해야 한다.
		no	refno
		1	0
		2	0
		> refno가 0인 글은 최상위 글로 일반글을 의미하고
		no	refno
		3	1
		4	3
		> 이 경우 3번 글은 상위 글이 1인 글이고, 다시 말하면 1번 글에 대한 답글을 의미한다.
		> 4번 글의 경우는 3번 글에 대한 답글을 의미한다.
		> 다시, 위 계층 구조를 정리하면
		no
		1
		=>3		RE:이전글제목
		  =>4
		2
		> 이와 같은 계층 구조로 답글이 처리되어야 한다.
3. 답글 처리 프로세스
	1) 상세화면에서 답글을 클릭 시
		- refno를 현재 글의 번호로 할당.
			$("[name=refno]").val($("[name=no]").val());
		- 제목을 "RE:이전글제목" 형식으로 설정
			$("[name=subject]").val("RE:"+$("[name=subject]").val());
		- 내용도 이전 글의 내용을 하단이나 상단에 표시하게 설정
			$("[name=content]").val("\n\n\n\n"+$("[name=content]").val());
		- form의 action으로 등록 controller를 호출해서 해당 내용의 형식을 유지하게 한다.
	2) 기존 등록 form 컨트롤러를 통해서 해당 데이터를 mapping 할 수 있게 처리
		/board.do?method=insForm
		insForm(@ModelAttribute("board") Board b)
	3) View단의 답글에서 넘겨온 요청값을 el로 입력
		<input name="refno" value="${board.refno}"
		<input name="subject" value="${board.subject}"
		<textarea name="content">${board.content}</textarea>
		혹은 spring form태그를 사용해 매핑
	4) 등록 후 데이터 확인
	
4. 답글 처리 후 list SQL ==> 계층형 SQL 처리
	1) 계층형 SQL 처리
		위와 같이 같은 테이블이나 테이블 관계에서 서로 계층형으로 연관관계가 있을 때, 
		데이터를 계층형 우선으로 리스트 처리해주는 oracle의 기능 처리 keyword를 이용
	2) 주요 기능 keyword
		start with 컬럼명 = 데이터: 계층형의 최상위 조건을 선언(refno=0). 루트조건
		connect by prior 하위컬럼 = 상위컬럼: 상위/하위 컬럼 mapping 관계 선언(no = refno)
			 ex) 데이터 리스트 시 connect by prior no = refno
			 	 10번 글이 나오고, 10번글을 refno로 한 글을 바로 다음 리스트에 출력 설정
		
		default는 오름차순으로 계층형 처리
		내림차순(마지막 데이터를 가장 위로, 최종으로 등록한 답글 포함)으로 계층형 처리를 하려면 order sibligs by 정렬기준컬럼 desc
		level 컬럼리스트에 표현하는 속성으로 계층의 level을 표시한다.
		rownum은 계층형 상관 없이 데이터리스트 번호를 출력해준다.
	3) 계층형에 따른 답글 처리
	4) 답글 화면 ui 표시
		- 이미지(답글)
		- ☞ 
		- SQL추가, level VO 등록
	5) 오늘 등록한 글 표기
		- 오늘 날짜 bean으로 등록
		- 1970/1/1 기준으로 현재 날짜 데이터 가져오기
		- 등록일 기준 날짜 가져오기
		- 비교하여 등록한 날과 오늘의 값이 같으면 New 표기

5. 페이징 처리
	1) 게시판의 데이터 건수가 늘어나는 화면에 보일 수 있는 한계가 있고, 데이터 로딩 속도도 문제가 된다.
		일반적으로 웹 프로그램에서 게시판은 한번에 보일 건수를 지정하여, 페이단위로 데이터를 볼 수 있게 처리한다.
		
	2) 화면 구조
		총건수 : @@	-한번에 보일 데이터 건수 설정 SELECT 3/5/10/20
		한페이지 보일 데이터 리스트 10건 기준이면 페이지별로 데이터가 10건이 보인다.
		
		block단위 페이징
			- 한 번에 보일 데이터 건수 설정(3/5/10/20...)			
				[1][2][3][4][5] >>
				<< [5][6][7][8][9][10]>>
		해당 페이지를 클릭 시, 해당 페이지에 속해있는 데이터를 리스트해서 볼 수 있다.
		<<(왼쪽페이지 블럭이동), >>(오른쪽페이지 블럭이동)을 통해서, 다수의 페이지를 효율적으로 이동하면서 페이지 내용을 확인할 수 있다.
	3) 페이지 처리 SQL과 속성
		SELECT ROWNUM - 고유의 행 데이터 번호
		...
		WHERE ROWNUM BETWEEN 페이지시작번호 AND 페이지마지막번호
		EX) 데이터 1000건이고 페이지당 건수 10건이면
			ROWNUM은 1~1000을 데이터베이스 SQL을 통해서 가져올 수 있고,
			첫 번째 페이지는 WHERE ROWNUM BETWEEN 1 AND 10
			두 번째 페이지는 WHERE ROWNUM BETWEEN 11 AND 20
			...
			SELECT * 
			FROM(SELECT rownum rn, level, a.* FROM BOARD a
				 WHERE subject LIKE '%'||''||'%'
				 AND writer LIKE '%'||''||'%'
				 start with refno = 0
				 connect by prior no = refno
				 order siblings by no DESC)
			WHERE rn BETWEEN 6 AND 10
	4) 페이지 처리를 위한 속성들
		시작번호: start
		마지막번호: end
	5) 위 속성을 가져오기 위한 속성
		총 데이터 건수 (DB SQL): count
			SELECT count(*) FROM board WHERE...
		페이지 당 건수(화면에서 요청값 - select): pageSize
		총 페이지 수: pageCount (= count/pageSize)
			ex) 총 데이터 건수 100, 한 번에 보여줄 건수 10 => 총 페이지 수 = 10
				나누어 떨어지지 않으면 올림 처리(Math.ceil())
				ex) 101건, 페이지 당 10건, 총 페이지수 11
			[1][2][3][4][5][6][7][8][9][10]
		현재 페이지(curPage): 위 리스트된 페이지 번호를 클릭했을 때, 시작번호와 마지막 번호를 처리하기 위해 넘겨준다.		
		시작 번호(start): (현재페이지-1)*페이지당 건수+1 
			ex) (1-1)10+1 ==> 1  첫 번째 페이지 번호 클릭 시 첫 번째 번호
				(2-1)10+1 ==> 11 두 번째 페이지 번호 클릭 시 첫 번째 번호
		마지막 번호(end): curPage * pageSize
			ex) 1*10 ==> 10 첫 번째 페이지 번호 클릭 시 마지막 번호
				2*10 ==> 20 두 번째 페이지 번호 클릭 시 마지막 번호
		
6. 개발 순서(기본 페이징 처리)
	1) 위에 선언된 속성을 가진 조회를 위한 VO 생성
		BoardSch
		subject, writer, count, pageSize, pageCount, curPage, start, end;
	2) 공통 mybatis.xml에 등록
		BoardSch sch
		요청 controller service dao 모든 매개변수 BoardSch
	3) 총 데이터 건수 dao 메서드 작성		
		public int totCnt(BoardSch sch);
	4) mapper.xml 총 건수 처리
		기본 SQL에 start, end 추가 처리
	5) service
		위 business 로직에 의한 start, end 설정
	6) Controller의 modelAttribute를 BoardSch로 변경
	7) 화면단
		총건수 표기
			SELECT name = "pageSize"
		반복문을 이용해서 총 페이지 수만큼 처리
		페이지를 클릭 시, hidden name="curPage"에 해당 값 설정
		요청값 전달

7. 블럭페이징
	1) 페이지 수가 커질 때 한정된 페이지(5,7,9) 번호를 보이고
		해당 범위 이상으로 가면 <<(이전), >>(이후)로 block단위로 페이지를 보이게 하여
		효과적으로 페이징을 하는 것을 말한다.
	2) 핵심 로직
				1  2  3  4  5	[이후] ==> blocknum 1
		[이전] 	6  7  8  9  10	[이후] ==> blocknum 2
		[이전] 	11 12 13			 ==> blocknum 3
			이전/이후를 클릭 시, 블럭 단위로 이동 처리 하여 페이지 번호를 하단에 리스트 처리 한다.
	3) 주요 속성
		blocksize: 블럭 단위로 보일 페이지의 크기
		blocknum: 블럭 단위에 할당할 블럭 번호
			(blockSize와 curPage를 이용해서 처리)
			curPage/blockSize 
				1/5, 2/5, 3/5, 4/5, 5/5 ==> 1
				6/5, 7/5, 8/5, 9/5, 10/5 ==> 2
			ex) 1번 블럭에는 1페이지 ~ 5페이지까지 출력
				2번 블럭에는 6페이지 ~ 10페이지까지 출력
				3번 블럭에는 11페이지 ~ 마지막 페이지(pageCount)까지 출력
		startBlock 블럭마다 시작 페이지 번호
			(blocknum-1)*blocksize+1
		endBlock 블럭마다 마지막 페이지 번호
			blocknum*blocksize
			예외) 마지막 블럭의 페이지번호는 pageCount까지
	4) 개발 순서
		- VO 속성값 지정
		- service단에서 위의 로직 처리
		- 화면단 구현
			<c:forEach begin="${boardsch.startBlock}" end="${boardsch.endBlock}">
			이전/이후를 클릭 시 전송할 현재페이지 설정. curPage -1/+1 설정




		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		