# AJAX를 활용한 FullCalendar plugin 활용하기
1. spring에서 지원하는 JSON Viewer를 이용, backend단의 데이터를 FullCalendar api와 연동하여 효과적인 calendar 데이터를 처리
2. 개발 순서
	1) FullCalendar lib 다운로드
	2) JSP 환경으로 front end단 lib 호출
	3) FullCalendar api의 JSON데이터와 주요 핵심 기능 메서드 확인
	4) 주요 기능 정의
	5) FullCalendar 기본 sample예제 및 api를 통해, JSON데이터를 테이블 구조로 변경하여 테이블 생성 및 sample데이터 입력
	6) 사용하게 될 SQL 작성
		- 조회
		- 등록
		- 수정
		- 삭제
	7) 해당 내용을 처리하기 위한 VO/DTO 정의
	8) SQL을 기반으로 DAO 작성
	9) mybatis.spring.xml에 사용할 VO/DTO alias 및 CalMapper.xml 등록
	10) CalMapper.xml에서 작성한 DAO와 연동
	11) service작성 및 DAO 호출
	12) Controller 작성
		- 초기 화면 호출
		- AJAX 호출 기능 메서드 구현
			조회
			등록
			수정
			삭제
	13) view단에서 해당 데이터 list/수정/삭제 AJAX 호출
	14) 각 기능 별 기능 메서드 구현
	
# spring controller를 통한 초기 화면 설정
1. 스프링 controller / FullCalendar 호출 화면 만들기
2. 필요한 lib를 특정 위치에 복사
	WebContent\fullcalendar-5.6.0\lib 폴더를 복사해서 
	WebContent\a00_com에 위치
3. 해당 내용을 controller에서 호출해서 보일 수 있게 JSP에 처리
	WebContent\fullcalendar-5.6.0\examples\selectable.html에 있는 내용을
	WebContent\WEB-INF\views\a03_ajax\a04_fullcalendar.jsp에 복사
4. 초기 화면 호출

# FullCanlendar api의 JSON데이터와 주요 핵심 기능 메서드 확인
1. new FullCalendar.Calendar(calendarEl, {속성:속성값,...});
	1) calendarEl: 화면에 지정한 DOM 객체
	2) {속성:속성값,...}: calendar에 활용할 속성들
2. 주요 속성
	1) headerToolbar: 상단 타이틀 옵션 설정
	2) initialDate: 초기 로딩 기준일
	3) 주요 이벤트
		> 형식 - 이벤트명:function(){}: 각 날짜에 대한 이벤트를 통해 처리할 내용
		# select:function(arg){}: 없는 일정 클릭이나 시간 클릭 후 스크롤링 했을 때, 
								  arg는 이벤트를 통한 해당 날짜(시작시간/마지막시간/종일여부)의 속성을 가져온다.
									arg.start: 선택한 시작 날짜
									arg.end: 선택한 마지막 날짜
									arg.allDay: 종일 일정 여부
									calendar.addEvent(JSON 형식);: 매개변수로 받은 일정을 화면에 반영하기 위한 일정 추가
										ex) calendar.addEvent({
												title : title,
												start : arg.start,
												end : arg.end,
												allDay : arg.allDay
											})
		# eventClick: 현재 보이는 일정을 클릭 시
			eventClick : function(arg) {
				있는 일정을 클릭 시, arg.event에 있는 속성				
				allDay: false // 종일 여부. 시간일 때에는 false
				backgroundColor: "" // 배경 색상
				borderColor: "" // 테두리 색상
				end: null // 마지막 일
				extendedProps: Object // 추가할 속성
				groupId: "" // 그룹으로 지정할 때
				id: "" // 식별자
				start: Tue Apr 13 2021 07:00:00 GMT+0900 (대한민국 표준시) // 시작일
				textColor: "" // 글자색
				title: "Birthday Party" // 보일 제목
				url: "" // 링크할 url
				
				arg.event.remove(): 기존 일정 삭제(화면에서 사라짐)
	4) 화면에 리스트 되는 일정을 JSON 형식으로 출력
		events : [
					{
						title: '일정 추가',
						start: '2021-04-02',
						backgroundColor:"pink",
						textColor:'blue',
						borderColor:"red"
					}
				 ]
		ex1) 등록 시, 배경색상을 노란색, 글자 색상을 파란색으로 설정
		ex2) events에 JSON으로 4월30일에 일정 등록. 제목은 수료일. 글자색상은 노란색, 배경색상은 초록색
		
# 속성을 이용한 테이블 구조 만들기
id
groupId
title
writer
content
start
end
allDay
textColor
backgroundColor
borderColor										
								
create table calendar(
	id number primary key,
	groupId number,
	title varchar2(50),
	writer varchar2(50),
	content varchar2(1000),
	start1 date,
	end1 date,
	allDay number(1),
	textColor varchar2(50),
	backgroundColor varchar2(50),
	borderColor	varchar2(50)
);
create sequence cal_seq
	start with 1
	increment by 1
	minvalue 1
	maxvalue 9999999
	no cycle;
	




















