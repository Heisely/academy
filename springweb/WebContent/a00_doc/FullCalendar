# AJAX를 활용한 FullCalendar plugin 활용하기
1. spring에서 지원하는 JSON Viewer를 이용, backend단의 데이터를 FullCalendar api와 연동하여 효과적인 calendar 데이터를 처리
2. 개발 순서
	1) FullCalendar lib 다운로드
	2) JSP 환경으로 front end단 lib 호출
	3) FullCalendar api의 JSON데이터와 주요 핵심 기능 메서드 확인
	4) 주요 기능 정의
	5) FullCalendar 기본 sample예제 및 api를 통해, JSON데이터를 테이블 구조로 변경하여 테이블 생성 및 sample데이터 입력
	6) 사용하게 될 SQL 작성
		- 조회
		- 등록
		- 수정
		- 삭제
	7) 해당 내용을 처리하기 위한 VO/DTO 정의
	8) SQL을 기반으로 DAO 작성
	9) mybatis.spring.xml에 사용할 VO/DTO alias 및 CalMapper.xml 등록
	10) CalMapper.xml에서 작성한 DAO와 연동
	11) service작성 및 DAO 호출
	12) Controller 작성
		- 초기 화면 호출
		- AJAX 호출 기능 메서드 구현
			조회
			등록
			수정
			삭제
	13) view단에서 해당 데이터 list/수정/삭제 AJAX 호출
	14) 각 기능 별 기능 메서드 구현
	
# spring controller를 통한 초기 화면 설정
1. 스프링 controller / FullCalendar 호출 화면 만들기
2. 필요한 lib를 특정 위치에 복사
	WebContent\fullcalendar-5.6.0\lib 폴더를 복사해서 
	WebContent\a00_com에 위치
3. 해당 내용을 controller에서 호출해서 보일 수 있게 JSP에 처리
	WebContent\fullcalendar-5.6.0\examples\selectable.html에 있는 내용을
	WebContent\WEB-INF\views\a03_ajax\a04_fullcalendar.jsp에 복사
4. 초기 화면 호출

# FullCanlendar api의 JSON데이터와 주요 핵심 기능 메서드 확인
1. new FullCalendar.Calendar(calendarEl, {속성:속성값,...});
	1) calendarEl: 화면에 지정한 DOM 객체
	2) {속성:속성값,...}: calendar에 활용할 속성들
2. 주요 속성
	1) headerToolbar: 상단 타이틀 옵션 설정
	2) initialDate: 초기 로딩 기준일
	3) 주요 이벤트
		> 형식 - 이벤트명:function(){}: 각 날짜에 대한 이벤트를 통해 처리할 내용
		# select:function(arg){}: 없는 일정 클릭이나 시간 클릭 후 스크롤링 했을 때, 
								  arg는 이벤트를 통한 해당 날짜(시작시간/마지막시간/종일여부)의 속성을 가져온다.
									arg.start: 선택한 시작 날짜
									arg.end: 선택한 마지막 날짜
									arg.allDay: 종일 일정 여부
									calendar.addEvent(JSON 형식);: 매개변수로 받은 일정을 화면에 반영하기 위한 일정 추가
										ex) calendar.addEvent({
												title : title,
												start : arg.start,
												end : arg.end,
												allDay : arg.allDay
											})
		# eventClick: 현재 보이는 일정을 클릭 시
			eventClick : function(arg) {
				있는 일정을 클릭 시, arg.event에 있는 속성				
				allDay: false // 종일 여부. 시간일 때에는 false
				backgroundColor: "" // 배경 색상
				borderColor: "" // 테두리 색상
				end: null // 마지막 일
				extendedProps: Object // 추가할 속성
				groupId: "" // 그룹으로 지정할 때
				id: "" // 식별자
				start: Tue Apr 13 2021 07:00:00 GMT+0900 (대한민국 표준시) // 시작일
				textColor: "" // 글자색
				title: "Birthday Party" // 보일 제목
				url: "" // 링크할 url
				
				arg.event.remove(): 기존 일정 삭제(화면에서 사라짐)
	4) 화면에 리스트 되는 일정을 JSON 형식으로 출력
		events : [
					{
						title: '일정 추가',
						start: '2021-04-02',
						backgroundColor:"pink",
						textColor:'blue',
						borderColor:"red"
					}
				 ]
		ex1) 등록 시, 배경색상을 노란색, 글자 색상을 파란색으로 설정
		ex2) events에 JSON으로 4월30일에 일정 등록. 제목은 수료일. 글자색상은 노란색, 배경색상은 초록색
		
# 속성을 이용한 테이블 구조 만들기
	id
	groupId
	title
	writer
	content
	start
	end
	allDay
	textColor
	backgroundColor
	borderColor										
									
	create table calendar(
		id number primary key,
		groupId number,
		title varchar2(50),
		writer varchar2(50),
		content varchar2(1000),
		start1 varchar2(50),
		end1 varchar2(50),
		allDay number(1),
		textColor varchar2(50),
		backgroundColor varchar2(50),
		borderColor	varchar2(50)
	);
	// start1 date: 조회/상세읽기(O) but 등록/수정/삭제 ==> bug when toISOString()
	
	create sequence cal_seq
		start with 1
		increment by 1
		minvalue 1
		maxvalue 9999999
		no cycle;
	
	create sequence cal_gp_seq
		start with 10000
		increment by 1
		minvalue 1
		maxvalue 99999;
	
# 캘린더 등록
1. 화면 처리 방식 결정
	1) 등록할 속성값 지정
		id [DB]
		groupId [DB]
		title [입력]
		writer [입력]
		content [입력]
		start [full api]
		end [full api]
		allDay  [full api]
		textColor [입력]
		backgroundColor [입력]
		borderColor	[입력]
	2) 등록할 화면 로딩(dialogue-jquery ui/bootstrap으로 처리)
		위에 있는 입력 항목에 대해
		ex1) form에 넣고, jquery ui dialogue 화면 처리
		ex2) form에 넣고, bootstrap으로 dialogue 화면 처리
		(1) 기본 화면 구성
			<div id="schDialog" title="일정"> 
				<form id="frm">
					<input name="id" type="hidden" value="0"/>
					<div class="input-group mb-3">			
						<div class="input-group-prepend">
							<span class="input-group-text">제목</span>
						</div>
						<input class="form-control" name="title" type="text"/>
					</div>
		(2) CSS 설정: (주의)다른 CSS 호출의 마지막 부분에 설정
			<style>
				input[type=text], select, label, textarea{
					margin-bottom:12px; 
					padding:.4em;
					width:95%;
				}
				.input-group-text{
					width:100%;
					text-align:center;
					background-color:linen;
					color:black;
					font-weight:bolder;
				}
				.input-group-prepend{
					width:35%;
				}
			</style>					
		(3) JQuery 설정
			- 기본 옵션으로 dialogue 설정
				document.addEventListener('DOMContentLoaded', function() {
					var opts={
							autoOpen:false, // 초기에 로딩하지 않게 처리
							width:"350px",
							modal:true // popup 로딩 시, 다른 요소객체 비활성화
							,buttons:{
								"버튼명1":function(){},								
								"버튼명2":function(){}
							} // 하단 opts.buttons와 같은 기능
					}
					$("#schDialog").dialog(opts);		
						
			- 등록 처리할 때, 등록 버튼이 추가된 dialogue 설정 및 open 프로세스 구현
				select : function(arg) {
					opts.buttons={
							"등록":function(){
								// ajax 처리
								// 등록 버튼 추가
								// 등록 버튼 클릭 시 처리할 내용
							}
					};
					// 등록 버튼을 클릭 시 옵션을 다시 처리
					$("#schDialog").dialog(opts); // 다이얼로그를 사용할 준비 > 이벤트를 통해서 처리
					$("#schDialog").dialog("open"); // 다이얼로그 로딩
					// $("#schDialog").dialog("close"); // 다이얼로그 창닫기
					// $("#btn01").click();
					// arg를 받은 기본 속성 값으로 특정한 form요소객체의 값을 설정
					// 시간/날짜를 클릭하거나 드래그한 시간/날짜에 Date객체인 .toLocaleString()로 날짜 출력 형식 처리
					$("[name=start]").val(arg.start.toLocaleString());
					$("[name=end]").val(arg.end.toLocaleString());
					$("[name=allDay]").val(""+arg.allDay); // boolean값인데 문자열로 표기해야 하므로 ""로 처리
						
	3) 등록 버튼 클릭 시, ajax 처리.
		"등록":function(){} 부분에 등록 버튼 클릭 시 처리할 ajax 선언
		- 우선 전달할 데이터를 json형식으로 정리
		- calendar.addEvent(추가할 json 데이터): 화면 반영
		- $.ajax(); 를 통해서 서버에 요청값 전달
	4) controller단 호출 및 작성
		jsp로 호출하면 안 나옴
2. SQL 작성
	INSERT INTO calendar 
	VALUES (cal_seq.nextval, '', 
			#{title}, #{writer}, #{content},
			#{start}, #{end}, 
			#{allDay},#{textColor},#{backgroundColor},#{borderColor})
3. SQL에 맞는 VO 확인
4. DAO작성
	public void insertCalendar(Calendar ins);
5. mapper.xml 작성
6. service 작성
7. controller에서 service 호출
	/calendar.do?method=insert
8. 화면단 ajax 처리
	1) 날짜를 클릭 시, 시작날짜와 종료날짜 객체를 전역변수에 할당.
		var date = {};
	2) 입력버튼 클릭 시, 날짜 ==> ISOString()형식으로 변환해 화면과 DB에 전송
	3) ajax 처리
		
# 캘린더 상세화면
1. 캘린더는 초기에 list할 때, 캘린더의 상세정보 데이터를 각 일정마다 가지고 있다.
	해당 내용 클릭 시, 내부적으로 속성값을 호출해서, 원하는 화면 UI를 통해서 출력하면 된다.
2. 프로그래밍
	1) 클릭 시 처리되는 매개변수를 통해 일정을 가져옴
	2) dialogue로 처리되는 div의 form 하위 요소의 값에 할당
	3) 상세이기 때문에 dialogue 버튼 옵션을 수정/삭제 버튼으로 처리

# 캘린더 수정/삭제
1. 수정 삭제 SQL 작성
	update calendar
		set title = '',
			start1 = '',
			end1 = '',
			content = '',
			backgroundColor = '',
			borderColor = '',
			textColor = '',
			allDay = ''
	where id = '';
	delete from calendar where id = '';
2. DAO/mapper 작성
	public void updateCalen(Calendar upt);
	public void deleteCalen(int id);
3. service/controller 호출
4. controller 기능 메서드 선언
	method=update
	method=delete
5. 화면단(event 처리)
	화면처리/DB처리
	0) 수정 이벤트 확인
		상세 화면 수정
		drag and drop 수정 (날짜와 시간 변경)
		resize 수정(시간 변경)
	1) 수정 클릭 시
		변경된 부분을 json데이터로 가져오기
		# 화면 변경
		현재 이벤트의 데이터를 id값으로 가져와서 setPop을 통해 변경
		# ajax 처리
		
	2) 삭제 클릭 시

# Drag and Drop 수정(날짜와 시간 변경) / Resize 수정(시간 변경)
1. arg값을 가져와서 변경값을 
	0) 기존 수정 ajax처리와 모듈을 활용하기 위해 parameter 처리로 ajax 요청값을 변경한다.
	1) arg.event로 변경 속성을 가져온다.
	2) 날짜관련 내용은 ISO형식으로 변경시킨다.
	3) ajax로 수정한다.
2. 수정 데이터 변경
	1) 기존 데이터에서 sch객체의 해당 요청값으로 데이터를 변경한다.
		var sch = {};
		sch.title = arg.event.title;
		sch.start = arg.event.start.toISOString();
		sch.end = arg.event.end.toISOString();
		sch.content = arg.event.content;
		sch.backgroundColor = arg.event.backgroundColor;
		sch.borderColor = arg.event.borderColor;
		sch.textColor = arg.event.textColor;
		sch.allDay = arg.event.allDay;




























