# 스프링 화면 처리 프로세스

   [서버]
   특정 위치에 WAS(web application server) 구동
   
[클라이언트]
1.    http://localhost:7080/sprintweb/start.do url
   ?요청key=요청값(get방식/post방식 name="요청key" value="요청값")
   
2.   [설정] web.xml
      .do를 확인해서 front controller인 DispatcherServlet.java(framework)
   
3.    [설정] dispatcher-servlet.xml을 호출하여, 
      해당하는 컨테이너에 등록된 객체를 확인하고, 메모리에 로딩된 객체를 찾는다.
      1)    전체적으로 특정 패키지 기준으로 등록 : 사용자 정의 클래스/객체
         context:component-scan basePackage=""
      2)   추가적으로 필요한 framework - viewResolver
         controller/service/dao
      controller/service/dao
      context:component-scan basePackage=""
      framework : mybatis(DB)
   이 중에서 requestMapping("/start.do")가 있는 controller 기능 메서드 찾기
   
4.    [Controller:주소호출] 위에 등록된 객체 안에서 url 패턴이 /start.do인 것의 기능 메서드를 찾는다
      @RequestMapping("/start.do")
      해당 controller의 기능 메서드를 수행해준다.
   
5.    [Controller:요청값처리] 해당 기능 메서드에서 요청값과 model값 설정은 매개변수로 받을 수 있다.
      ?name=홍길동?age=25&loc=서울 신림동
      public String start(@RequestParam("name") String name, Model d)
                  Person s
                     @ModelAttribute("sch") Person
   ModelAttribute : 요청값을 받을 뿐만 아니라 모델 데이터로 사용하기 위해 활용+spring에서 사용하는 form 태그
               <form:form ModelAttribute="sch"
                  <form:input path="name"/>
                  ==>   <input id="name" type="text"

6.    [Controller:모델데이터처리]
   model:MVC 중 하나로 화면/view에서 넘겨줄 핵심 데이터
   public String start(Model d)
   d.addAttribute("모델key",모델객체);
      모델 객체 : Service --> Dao --> mybatis Framework --> DB Server
                   <--    <--               <--
7.    [controller:view단 호출] 해당 기능 메서드에 문자열로 리턴된 view단으로 화면이 호출된다
      return "JSP파일 위치";   forward/redirect
      return "jsp 파일 위치";    (forward 방식을 기본으로) 
                        request/reponse객체를 넘긴다(모델/요청/session)
      return "forward(parameter값을 받을 수 있음)/다른 url mapping" ex) "forward:/emp.dao"
      return "redirect/다른 url" : request/session 전달하지 않음
   
   ModelAndView : model+view
      addObject(모델key, 모델값)
      setViewName("뷰단 호출")
      ex) public ModelAndView show(){
            ModelAndView mav = new ModelAndView();
            mav.addObject(key,value);
            mav.setViewName("뷰단 호출");
            return mav;
   
            }
         return "pageJsonReport";
            //container에서 선언된 bean으로 view 처리 방식(json)
8.   [View]
      ${모델멩} : 한 개의 변수 
         ex)
         controller m.setAttribute("greet","hello");
         jsp ${greet}
      ${모델명.프로퍼티} : 객체로 선언되어 있을 때
         ex)
         controller : m.setAttribute("emp",service.getEmp(empno));
         jsp : 
            ${emp.ename} == emp.getEname()
                  cf) mybatis #{ename}
   
   ${배열형 모델명} : list형 객체배열
      ex)
      controller : m.setAttribute("empList", service.getEmpList(sch));
      jsp : <c:forEach var="emp" items="${empList}"
            ${emp.empno} ${emp.ename}
9.   [설정] dispatcherServlet 최종으로 클라이언트 전달

[클라이언트]
10. 서버에서 만들어진 화면을 response객체로 전달받아 client에 HTML로 전달하면,
   브라우저에서는 해당 JS/HTML/CSS코드를 실행 및 랜더링하여 출력한다.





# 스프링 핵심 구현
1. front controller 선언
   DispatcherServlet   
   
2. 사용할 container 선언
   DispatcherServlet의 설정값 처리 xml: 
   IOC(Inversion Of Control) 개발자 ==> container에 통제를 맡김
      - DI(Dependency Injection): 의존성 주입
         ex) autowiring : 객체 vs 객체 메모리에서 로딩된 상황에서 의존성이 있는 객체는 해당 객체의 메모리에 할당(주입)
            Controller 안 
            @Autowired
            private Service service;
                        
      - DL(Dependency Lookup): 의존된 내용을 이용해 id/name으로 설정된 객체를 찾는 작업
   dispatcher-servlet.xml: 여기에 선언하는 객체 활용방식을 정확하게 파악하고 설정할 수 있어야 원활하게 스프링을 코딩하고 설정할 수 있다.
   bean클래스 선언을 통해 tomcat이 시작되어 첫 번째 호출 될 때 사용할 객체 메모리로 로딩
   - 사용자 정의 객체에 대한 로딩
         -Controller를 등록 처리
   - framework에 지원되는 여러 클래스를 객체로 로딩
         주로 활용되는 내용
         공통 controller/service/dao단 설정 위치
         소스에서 호출하여 처리 방법 선언 : Annotation 코드를 autowire 객체
         여러가지 viewResolver의 등록처리(json, 파일 업로드/다운로드...)
         database 처리 framework 등록(mybatis)
         사용할 공통 key값등록 호출(연결할 서버 벙보 - DB서버, 파일서버, 메일서버)
         다국어 처리 모듈 등록
         배치 파일 모듈 등록
   
3. spring MVC
   - Controller: 중재자 역할(요청, service전달/받기, view단 호출) Java 클래스로 선언
      Controller --> service --> DAO(인터페이스) --> DB 서버
      <<요청값전달>>         비즈니스 로직 처리      select *
                                       from
                                       where empno=#
      
      Controller <-- service <-- DAO(실객체)
      모델 처리      비즈니스 로직 처리      <<데이터베이스 처리 결과>>
                              select * 의 결과를 전송
                              resultXXX

   - Model: controller 안에 선언
      화면단에 보내줄 핵심 데이터 처리
      # Model데이터를 만들기 위해 도와주는 process 객체들
      - service
         핵심 비즈니스 로직 정리
            > 등록/수정/삭제/DB가져오기 등, 사용될 핵심 로직을 처리한다.(조건/반복문 활용)
               > 모델데이터를 만들기 위한 작업 처리
      - DAO(Database Access Object)
   - View: JSP 파일을 controller에서 호출
         스프링의 view는 외부에서 url로 접근하지 못하고, controller를 통해서만 접근 가능
         WebContent\WEB-INF: 아무나 접근 불가.
         ps) css.js 관련 기본 설정내용, 이미지는 WebContent 하위에 있어야지 소스 내 ${path}/경로/파일며 접근이 가능
         
4. DI
   컨테이너에 사용할 객체 선언방법, 여러 가지 효과적인 기능처리 선언 방법
   
5. 데이터베이스 처리(DAO-MyBatis프레임웍 활용)
   1) 컨테이너 선언 방법(connection)
         - 연결객체
         - mybatis 공통 xml 위치
         - dao 인터페이스 위치 : 컨테이너에서 지정해야지
            mybatis framework에서 실제 객체를 만들어 준다
   2) MyBatis 공통 설정 XML
   3) 기능별 SQL XML 설정 방법
   4) mybatis 프레임웤을 통해 실체 객체를 만들어주는 dao interface 선언 패키지
   5) XXXmapper.xml vs DAO 인터페이스 mapping 개념
         dao 인터페이스 --> namespace
         메서드명       --> id
         리턴값       --> resultMap/resultType
         매개변수       --> parameterMap/parameterType
   
6. MVC 중급
   1) 여러 가지 Viewer 활용
      - AJAX를 통한 JSON처리 ==> jquery plugin 활용
      - 파일업/다운로드
      - 엑셀 다운로드
   2) 유효성 처리 / 예외 처리
   3) session 처리
   4) 다국어 처리: 하나의 페이지에서 설정값에 의해 여러 나라의 언어를 지원처리
   
7. AOP:   관점 지향적 프로그래밍

8. 실무 예제
   1) 답변형 게시판
      - 계층 구조 테이블 설계
      - 파일을 첨부하여 게시물 작성과 등록
      - 페이지 처리 로직
      - 답글에 따른 계층적 list 처리
   2) 메일 발송
   3) AJAX를 통한 FullCalendar(JQuery lib활용) 처리
   4) Vue와 연동하여 데이터 처리



   
   
# 환경 설정 순서
1. lib 복사

2. http://localhost:7080/springweb/start.do
   - 호출되었을 때, 스프링 프레임웍에 의해서 controller가 호출되고, view단이 호출되게 처리한다.
   - 사용하게 될 controller를 컨테이너에 등록 dispatcher-servlet.xml
   - controller에 @Controller를 선언
   
3. 스프링 프레임웍의 첫 단추인 front 컨트롤단 호출
   .do를 통해 
   
4. /start.do url을 통해 mapping되어 있는 controller의 기능 메서드 호출

5. controller단에서는 해당 기능 메서드의 return "view 자원 위치"; 를 통해 view를 호출 





# Controller의 세부 사항
1. 요청값
   - 한 개의 요청값 받기
   - 객체로 요청값 받기
2. 모델데이터 처리
3. 뷰 단 호출
   - 문자열로 실행할 view단 호출 및 forward처리(request,response 전달)
   - 선언된 Controller의 Mapping된 기능 메서드 호출
      > Redirect: /선언된url.do
      > forward: /선언된url.do
   - 여러 가지 viewer 호출
4. 요청값 + 모델 : ModelAttribute
5. 모델 + 뷰 단: ModelAndView





# 요청값 처리

&name=홍길동
1.   request.getParameter("name")
   form(@RequestParam("name" String name)
   요청값을 name의 key String name에 할당하여 가져올 수 있음
2.   객체로 요청값 처리

# ModelAttribute
1.   controller단의 공통 모델 데이터에 대한 선언
   - 하나의 업무단위로 controller를 쓰고
   - 하나의 기능단위로 mapping을 처리
   ex) 사원정보 처리 - 리스트, 상세화면, 등록/수정/삭제
      부서정보 콤보박스, 관리자정보 콤보박스
2.   요청값 + 모델 데이터 동시 처리



#   스프링에서 사용되는 form 태그
1.   스프링에서는 <form:form 형식으로 태그의 form을 효좌적으로 처리할 수 있도록 tag lib를 사용할 수 있음
2.   form의 구성 요소별 설정내용
   1)    lib 선언
      <%@ taglib prefix="form" uri="http://www.springframework.org/tags.form"%>
   2)   <form:form commandName="모델명"
      하위에 잇는 요소들을 setXXX property와 연동
         <form:input path="property명"
         
         ex) 컨트롤러에 model로 d.addAttribute("emp",newEmp())
            <form L form commandName="emp"
               <form:input path="empno">
                  ==> <input type="text" id="empno" name="empno" value="${emp.empno}"/>
         
         select, checkbox, radio 옵션 중
         %<c:forEach> 구문을 사용하지 않더라도 효과적으로 폼요소객체를 구현할 수 있다.
         1)   레이블에 보이는 데이터와 전송되는 데이터가 동일할 경우
            <option>사과</option>
            <form:options items="${모델어트리뷰트명}"/>
         2)   레이블에 보이는 데이터와 전송되는 데이터가 다른 경우
            key/value <option value="ch01">사과</option>
            <form:options items="${모델어트리뷰트명}"
               itemLabel="value값" itemValue="key값"/>
         3)   <form:select items="${모델 어트리뷰터명}"/> 단일 리스트
            <form:select itmes="${모델 어트리뷰터명}" itemLabel="value값" itemValue="key값"/>
               key/value 형식의 리스트
               
               
# Session
1. 목적
	로그인 후 DB 접속 없이
	1) 각 화면에서 권한 check
	2) 로그인 인증 이후에 처리할 내용 프로세스 처리
	3) 작성자난 특정 데이터를 session값으로 자동 입력
2. 주요 코드 내용
	1) 특정한 인증된 사용자에 대해 해당 객체를 session값으로 설정
		- 초기 로그인 화면 처리
	2) Controller
		public String login(Member mem, HttpServletRequest request){
			Member ckDB = service.ckMember(mem);
			if(ckDB!=null){
				HttpSession session = request.getSession();
				session.setAttribute("sesMem", ckDB);
			}
		}
		
		@RequestMapping("logout.do")
		public String logout(HttpServletRequest request){
			HttpSession session = request.getSession();
			session.invalidate();
			return "redirect:/login.do";
		}
	3) 각 화면에서 처리할 내용
		- js
			var sessId = "${sesMem.id}";
			if(sessId==""){
				alert("로그인이 필요합니다.\n로그인 화면으로 이동합니다.");
				location.href = "${path}/login.do";
			}
			$("#uptBtn").click(function(){
				var writer = $("[name=writer]").val();
				if(sessId!=writer){
					alert("작성자만 수정가능합니다.");
					return ;
				}
			});
			$("#logout").click(function(){
				location.href = "${path}/logout.do";
			});
		- 등록 시, 작성자는 session의 id로만 입력이 가능하게 처리
			<input name="writer" readonly value="${sesMem.id}"/>
3. 게시판 적용
	1) SQL 확인
		select * from member5 where id = #{id} and pass = #{pass}
	2) DAO / myBatis / Mapper 작성
		public Member login(Member mem);
		<typeAlias alias="member" type="board.z01_vo.Memeber"/>
		<select id="login" parameterType="member" resultType="member">
			SELECT * FROM MEMBER5
			WHERE ID = #{id} AND PASS = #{pass}
		</select>		
	3) Service
	4) Controller에서 로그인 화면 및 session 처리

# AOP 컨테이너 적용
1. advise 클래스 생성
	Profiler
2. container에 적용 시점 (pointer cut), 대상 클래스 지정
	aop 선언
	




































